% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Visualize_Scatter.R
\name{Visualize_Scatter}
\alias{Visualize_Scatter}
\title{Group-level visualization of group-level results}
\usage{
Visualize_Scatter(
  dfResults,
  dfBounds = NULL,
  strGroupCol = NULL,
  strGroupLabel = NULL,
  strUnit = "days",
  vColors = c("#999999", "#FADB14", "#FF4D4F")
)
}
\arguments{
\item{dfResults}{`data.frame` A stacked summary of analysis pipeline output.
Created by passing a list of results returned by [Summarize()] to
[BindResults()]. Expected columns: `GroupID`, `GroupLevel`, `Numerator`,
`Denominator`, `Metric`, `Score`, `Flag`, `MetricID`, `StudyID`,
`SnapshotDate`.}

\item{dfBounds}{`data.frame` Set of predicted percentages/rates and upper-
and lower-bounds across the full range of sample sizes/total exposure
values for reporting. Created by passing `dfResults` and `dfMetrics` to
[MakeBounds()]. Expected columns: `Threshold`, `Denominator`, `Numerator`,
`Metric`, `MetricID`, `StudyID`, `SnapshotDate`.}

\item{strGroupCol}{`character` name of stratification column for facet wrap Default: `NULL`}

\item{strGroupLabel}{`character` name of group, used for labeling axes. Default: `NULL`}

\item{strUnit}{`character` exposure time unit. Default: `days`}

\item{vColors}{`character` vector of hex colors for plotting boundaries/thresholds. Index 1: mean; index 2: first threshold boundary; index 3: second threshold boundary.}
}
\value{
group-level plot object.
}
\description{
`r lifecycle::badge("stable")`
}
\examples{

## Filter sample data to only one metric
reportingResults_filter <- gsm::reportingResults \%>\%
  dplyr::filter(MetricID == "Analysis_kri0001")

reportingBounds_filter <- gsm::reportingBounds \%>\%
  dplyr::filter(MetricID == "Analysis_kri0001")

## Output- filtered to one snapshot date
Visualize_Scatter(
  dfResults = reportingResults_filter \%>\%
    dplyr::filter(SnapshotDate == max(SnapshotDate)),
  dfBounds = reportingBounds_filter \%>\%
    dplyr::filter(SnapshotDate == max(SnapshotDate))
)

## Create Faceted output on snapshot date
Visualize_Scatter(
  dfResults = reportingResults_filter,
  dfBounds = reportingBounds_filter,
  strGroupCol = "SnapshotDate",
  strGroupLabel = "Snapshot Date"
)

## Custom Colors
Visualize_Scatter(
  dfResults = reportingResults_filter \%>\%
    dplyr::filter(SnapshotDate == max(SnapshotDate)),
  dfBounds = reportingBounds_filter \%>\%
    dplyr::filter(SnapshotDate == max(SnapshotDate)),
  vColors = c("#F4E7E7", "#C17070", "#981212")
)

}
