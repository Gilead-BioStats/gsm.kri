% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Visualize_Metric.R
\name{ChartsContinousDefault}
\alias{ChartsContinousDefault}
\title{Charts Continous Default Function}
\usage{
ChartsContinousDefault(
  lCharts = list(),
  dfResults,
  lMetric,
  dfGroups,
  vThreshold,
  bDebug
)
}
\arguments{
\item{lCharts}{`list`}

\item{dfResults}{`data.frame` A stacked summary of analysis pipeline output.
Created by passing a list of results returned by [Summarize()] to
[BindResults()]. Expected columns: `GroupID`, `GroupLevel`, `Numerator`,
`Denominator`, `Metric`, `Score`, `Flag`, `MetricID`, `StudyID`,
`SnapshotDate`.}

\item{lMetric}{`list` Metric-specific metadata for use in charts and
reporting. Created by passing an `lWorkflow` object to [MakeMetric()] and
turing it into a list. Expected columns: `File`,`MetricID`, `Group`,
`Abbreviation`, `Metric`, `Numerator`, `Denominator`, `Model`, `Score`, and
`strThreshold`. For more details see the Data Model vignette:
`vignette("DataModel", package = "gsm.kri")`.}

\item{dfGroups}{`data.frame` Group-level metadata dictionary. Created by
passing CTMS site and study data to [MakeLongMeta()]. Expected columns:
`GroupID`, `GroupLevel`, `Param`, `Value`.}

\item{vThreshold}{`numeric` Threshold values for metric.}

\item{bDebug}{`logical` Print debug messages? Default: `FALSE`.}
}
\value{
A list containing the following charts:
- timeSeries: A time series chart using JavaScript with score on the y-axis.
}
\description{
`r lifecycle::badge("stable")`

The function creates all continous charts for a default metric using the data provided
}
\examples{
lCharts <- list()
strMetricID = "Analysis_kri0001"

dfResults <-  gsm.core::reportingResults \%>\%
 dplyr::filter(MetricID == strMetricID)

dfGroups <- gsm.core::reportingGroups

lMetric <- gsm.core::reportingMetrics \%>\%
 dplyr::filter(MetricID == strMetricID) \%>\%
 as.list()

vThreshold = gsm.core::ParseThreshold(lMetric$Threshold, bSort = FALSE)

lCharts <- lCharts \%>\%
  ChartsContinousDefault(
    dfResults = dfResults,
    lMetric = lMetric,
    dfGroups = dfGroups,
    vThreshold = vThreshold,
    bDebug = FALSE
  )

lCharts

}
