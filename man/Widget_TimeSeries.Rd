% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Widget_TimeSeries.R
\name{Widget_TimeSeries}
\alias{Widget_TimeSeries}
\title{Time Series Widget}
\usage{
Widget_TimeSeries(
  dfResults,
  lMetric = NULL,
  dfGroups = NULL,
  vThreshold = NULL,
  strOutcome = "Score",
  bAddGroupSelect = TRUE,
  strShinyGroupSelectID = "GroupID",
  bDebug = FALSE,
  ...
)
}
\arguments{
\item{dfResults}{`data.frame` A stacked summary of analysis pipeline output.
Created by passing a list of results returned by [Summarize()] to
[BindResults()]. Expected columns: `GroupID`, `GroupLevel`, `Numerator`,
`Denominator`, `Metric`, `Score`, `Flag`, `MetricID`, `StudyID`,
`SnapshotDate`.}

\item{lMetric}{`list` Metric-specific metadata for use in charts and
reporting. Created by passing an `lWorkflow` object to [MakeMetric()] and
turing it into a list. Expected columns: `File`,`MetricID`, `Group`,
`Abbreviation`, `Metric`, `Numerator`, `Denominator`, `Model`, `Score`, and
`strThreshold`. For more details see the Data Model vignette:
`vignette("DataModel", package = "gsm.kri")`.}

\item{dfGroups}{`data.frame` Group-level metadata dictionary. Created by
passing CTMS site and study data to [MakeLongMeta()]. Expected columns:
`GroupID`, `GroupLevel`, `Param`, `Value`.}

\item{vThreshold}{`numeric` Threshold value(s).}

\item{strOutcome}{`character` Outcome variable. Default: 'Score'.}

\item{bAddGroupSelect}{`logical` Add a dropdown to highlight sites? Default: `TRUE`.}

\item{strShinyGroupSelectID}{`character` Element ID of group select in Shiny context. Default: `'GroupID'`.}

\item{bDebug}{`logical` Print debug messages? Default: `FALSE`.}

\item{...}{`any` Additional chart configuration settings.}
}
\description{
`r lifecycle::badge("stable")`

A widget that generates a time series of group-level metric results over time, plotting snapshot
date on the x-axis and the outcome (numerator, denominator, metric, or score) on the y-axis.
}
\examples{
## Filter data to one metric
reportingResults_filter <- gsm.core::reportingResults \%>\%
  dplyr::filter(MetricID == "Analysis_kri0001")

reportingMetrics_filter <- gsm.core::reportingMetrics \%>\%
  dplyr::filter(MetricID == "Analysis_kri0001") \%>\%
  as.list()

Widget_TimeSeries(
  dfResults = reportingResults_filter,
  lMetric = reportingMetrics_filter,
  dfGroups = gsm.core::reportingGroups,
  vThreshold = reportingMetrics_filter$Threshold
)

}
